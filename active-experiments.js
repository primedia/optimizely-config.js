// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  define([], function() {
    var activeExperiments;
    activeExperiments = function() {
      var getActiveExperiments, isEmpty, isExperientMatch, loadActiveExperiments;
      getActiveExperiments = function() {
        if (isEmpty(window.rentPathExperiments)) {
          return {};
        }
        return window.rentPathExperiments || {};
      };
      isEmpty = function(obj) {
        if ((obj != null) && (Object.keys(obj).length > 0)) {
          return false;
        } else {
          return true;
        }
      };
      isExperientMatch = function(experimentName, notMatch) {
        var experiment, soTestRegex, soVariationRegex, variation, _ref;
        window.rentPathExperiments || (window.rentPathExperiments = loadActiveExperiments());
        if (isEmpty(window.rentPathExperiments)) {
          return false;
        }
        soTestRegex = new RegExp(experimentName, "i");
        soVariationRegex = new RegExp(notMatch, "i");
        _ref = getActiveExperiments();
        for (experiment in _ref) {
          variation = _ref[experiment];
          if (experiment.match(soTestRegex) && !variation.match(soVariationRegex)) {
            return true;
          }
        }
        return false;
      };
      loadActiveExperiments = function() {
        var allExperiments, curTest, curVar, i, mExp, oActiveExperiments, oData, optimizelyObj, rentPathActiveExperiments;
        if (!window.optimizely) {
          return {};
        }
        rentPathActiveExperiments = {};
        optimizelyObj = window.optimizely;
        oData = optimizelyObj.data;
        oActiveExperiments = oData.state.activeExperiments;
        allExperiments = optimizelyObj.allExperiments;
        i = 0;
        while (i < oActiveExperiments.length) {
          mExp = oActiveExperiments[i];
          if (allExperiments[mExp].enabled) {
            curTest = oData.experiments[mExp].name;
            curVar = oData.state.variationNamesMap[mExp];
            rentPathActiveExperiments[curTest] = curVar;
          }
          i++;
        }
        return rentPathActiveExperiments;
      };
      return {
        isExperientMatch: isExperientMatch
      };
    };
    return activeExperiments;
  });

}).call(this);
